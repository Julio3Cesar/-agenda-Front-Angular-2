"use strict";
var service_1 = require('./service');
var typescript_host_1 = require('./typescript_host');
/** A plugin to TypeScript's langauge service that provide language services for
 * templates in string literals.
 *
 * @experimental
 */
var LanguageServicePlugin = (function () {
    function LanguageServicePlugin(config) {
        this.config = config;
        this.ts = config.ts;
        this.host = config.host;
        this.serviceHost = new typescript_host_1.TypeScriptServiceHost(this.ts, config.host, config.service, config.basePath, config.logger);
        this.service = service_1.createLanguageService(this.serviceHost);
        this.serviceHost.setSite(this.service);
    }
    LanguageServicePlugin.prototype.validate = function (files) {
        var _this = this;
        var result = new Map();
        result.set(this.config.basePath, []);
        return this.serviceHost
            .updateProgram()
            .then(function (isAngularProject) {
            if (!isAngularProject) {
                return new Map();
            }
            _this.serviceHost.removeFileDuplicates(files).forEach(function (file) {
                try {
                    var diagsMap = _this.service.getDiagnostics(file);
                    if (diagsMap) {
                        diagsMap.forEach(pushDiags);
                    }
                }
                catch (err) {
                    pushDiags([{
                            kind: service_1.DiagnosticKind.Warning,
                            span: { start: 0, end: 0 },
                            message: "Internal error within Angular2 Template validator:\n" + (err.stack || err.message)
                        }], file);
                }
            });
            return Promise.resolve(result);
        }).catch(function (error) {
            if (error.message && error.message.startsWith("VAL_ERR:")) {
                pushDiags([{
                        kind: service_1.DiagnosticKind.Error,
                        span: { start: 0, end: 0 },
                        message: error.message.substring(8)
                    }], _this.config.basePath);
            }
            else {
                pushDiags([{
                        kind: service_1.DiagnosticKind.Warning,
                        span: { start: 0, end: 0 },
                        message: error.message
                            ? (error.message + "\nCannot perform validation of Angular 2 templates. See Error Log view for details.")
                            : ("Fatal error within Angular2 Template validator:\n" + error.stack)
                    }], _this.config.basePath);
                _this.config.logger.log(error);
            }
            return Promise.resolve(result);
        });
        function pushDiags(toPush, fileName) {
            var diags = result.get(fileName);
            if (!diags) {
                diags = [];
                result.set(fileName, diags);
            }
            diags.push.apply(diags, toPush);
        }
    };
    LanguageServicePlugin.prototype.getPromisedCompletionsAtPosition = function (fileName, position) {
        var _this = this;
        return this.serviceHost
            .updateProgram()
            .then(function (isAngularProject) { return Promise.resolve(isAngularProject ? _this.service.getCompletionsAt(fileName, position) : []); });
    };
    /**
     * Augment the diagnostics reported by TypeScript with errors from the templates in string
     * literals.
     */
    LanguageServicePlugin.prototype.getSemanticDiagnosticsFilter = function (fileName, previous) {
        var errors = this.service.getDiagnostics(fileName).get(fileName);
        if (errors && errors.length) {
            var file = this.serviceHost.getSourceFile(fileName);
            for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
                var error = errors_1[_i];
                previous.push({
                    file: file,
                    start: error.span.start,
                    length: error.span.end - error.span.start,
                    messageText: error.message,
                    category: this.ts.DiagnosticCategory.Error,
                    code: 0
                });
            }
        }
        return previous;
    };
    /**
     * Get completions for angular templates if one is at the given position.
     */
    LanguageServicePlugin.prototype.getCompletionsAtPosition = function (fileName, position) {
        var result = this.service.getCompletionsAt(fileName, position);
        if (result) {
            return {
                isMemberCompletion: false,
                isNewIdentifierLocation: false,
                entries: result.map(function (entry) {
                    return ({ name: entry.name, kind: entry.kind, kindModifiers: '', sortText: entry.sort });
                })
            };
        }
    };
    LanguageServicePlugin["extension-kind"] = 'language-service';
    return LanguageServicePlugin;
}());
exports.LanguageServicePlugin = LanguageServicePlugin;
//# sourceMappingURL=plugin.js.map